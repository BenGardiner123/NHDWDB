use NHDW
IF OBJECT_ID('ETL_NHRM_PATIENT') IS NOT NULL
DROP PROCEDURE ETL_NHRM_PATIENT;
GO
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Ben Gardiner>
-- Create date: <6/10/21>
-- Description:	<This checks for existign source ids in the error event and dimpatient and then
-- imports all the new patient information that is new from the TPS>
-- =============================================
CREATE PROCEDURE ETL_NHRM_PATIENT 
as
begin

	--THIS CREATES A STRING WHICH IS A LIST OF THE SOURCE ID'S IN DWPATIENT
	DECLARE @ALREADY_IN_DIM NVARCHAR(MAX);
    SELECT @ALREADY_IN_DIM = COALESCE(@ALREADY_IN_DIM + ',', '') + NHDW.dbo.DIMPATIENT.DWDIM_SOURCEID
    FROM NHDW.dbo.DIMPATIENT
	WHERE DIMPATIENT.DWDIM_SOURCEDB = 'NHRM'

	--THIS CREATES A STRING WHICH IS A LIST OF THE SOURCE ID'S IN ERROREVENT
	DECLARE @ERROR_EVENT_EXISTING NVARCHAR(MAX);
	SELECT @ERROR_EVENT_EXISTING = COALESCE(@ERROR_EVENT_EXISTING + ',', '') +  ERROREVENT.SOURCE_ID
	FROM NHDW.dbo.ERROREVENT
	WHERE SOURCE_DB = 'NHRM';

	
	
	--COMBINE THE TWO LISTS OF NUMBERS INTO ONE VARIABLE TO BE PUSHED IN TTHE QUERY BELOW
	DECLARE @TO_EXCLUDE NVARCHAR(MAX);
	SET @TO_EXCLUDE = @ALREADY_IN_DIM + ', ' + @ERROR_EVENT_EXISTING;

	DECLARE @SELECTQUERY NVARCHAR(MAX);

	if @TO_EXCLUDE is not Null 
		Begin
			SET @SELECTQUERY = '''SELECT URNUMBER, GENDER, YEAR(DOB) AS YOB,' +
                'SUBURB, POSTCODE, COUNTRYOFBIRTH, LIVESALONE, ACTIVE, ' +
                '(SELECT TOP 1 DIAGNOSIS FROM DDDM_TPS_1.DBO.CONDITIONDETAILS CD WHERE CD.URNUMBER = P.URNUMBER) AS [DIAGNOSIS],' +
                '(SELECT TOP 1 CATEGORYNAME FROM DDDM_TPS_1.DBO.PATIENTCATEGORY PC' +
                ' INNER JOIN DDDM_TPS_1.DBO.TEMPLATECATEGORY TC' +
                ' ON PC.CATEGORYID = TC.CATEGORYID' +
                ' WHERE PC.URNUMBER = P.URNUMBER) AS [CATEGORY], ' +
                '(SELECT TOP 1 PROCEDUREDATE FROM DDDM_TPS_1.DBO.CONDITIONDETAILS CD WHERE CD.URNUMBER = P.URNUMBER) AS [PROCEDURE]' +
                ' FROM DDDM_TPS_1.DBO.PATIENT P WHERE URNUMBER NOT IN (' + @TO_EXCLUDE + ')''';
				--check data here

		end
	else
		begin
		   SET @SELECTQUERY = '''SELECT URNUMBER, GENDER, YEAR(DOB) AS YOB,' +
                    'SUBURB, POSTCODE, COUNTRYOFBIRTH, LIVESALONE, ACTIVE, ' +
                    '(SELECT TOP 1 DIAGNOSIS FROM DDDM_TPS_1.DBO.CONDITIONDETAILS CD WHERE CD.URNUMBER = P.URNUMBER) AS [DIAGNOSIS],' +
                    '(SELECT TOP 1 CATEGORYNAME FROM DDDM_TPS_1.DBO.PATIENTCATEGORY PC' +
                    ' INNER JOIN DDDM_TPS_1.DBO.TEMPLATECATEGORY TC' +
                    ' ON PC.CATEGORYID = TC.CATEGORYID' +
                    ' WHERE PC.URNUMBER = P.URNUMBER) AS [CATEGORY], ' +
                    '(SELECT TOP 1 PROCEDUREDATE FROM DDDM_TPS_1.DBO.CONDITIONDETAILS CD WHERE CD.URNUMBER = P.URNUMBER) AS [PROCEDURE]' +
                    ' FROM DDDM_TPS_1.DBO.PATIENT P''';
					--check the output here
		end

	-- write the code to get the required data - excludes those identified above.
    DECLARE @CONNSTRING NVARCHAR(MAX);
    EXECUTE @CONNSTRING = GET_CONNECTION_STRING;

    DECLARE @COMMAND NVARCHAR(MAX);
    SET @COMMAND =  'SELECT * FROM OPENROWSET(''SQLNCLI'', ' + '''' + @CONNSTRING + ''',' + @SELECTQUERY + ') SOURCE';
    
    --EXECUTE(@COMMAND);
	
	--declare a table varible to hold the data coming form the TPS system

	 declare @PatientTable TestPatientTable;
	 INSERT INTO @PatientTable
	 EXEC(@COMMAND);

	-- SELECT * FROM @PatientTable;

	 EXEC ETL_FILTER_PROCESS_PATIENT @DATA = @PatientTable;

		
END